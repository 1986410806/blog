// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package dao

import (
	"blog-go/internal/model/entity"
	"blog-go/internal/service/internal/dao/internal"
	"blog-go/internal/service/internal/do"
	"context"
)

// userDao is the data access object for table user.
// You can define custom methods on it to extend its functionality as you wish.
type userDao struct {
	*internal.UserDao
}

var (
	// User is globally public accessible object for table user operations.
	User = userDao{
		internal.NewUserDao(),
	}
)

// Fill with you ideas below.

//GetUserByEmail 根据邮箱查询
func (d userDao) GetUserByEmail(ctx context.Context, email string) (*entity.User, error) {
	var user *entity.User
	if err := d.Ctx(ctx).Where(do.User{Email: email}).Scan(&user); err != nil {
		return nil, err
	}
	return user, nil
}

func (d userDao) GetUserById(ctx context.Context, uid int) (*entity.User, error) {
	var user *entity.User
	if err := d.Ctx(ctx).Where(do.User{Id: uid}).Scan(&user); err != nil {
		return nil, err
	}
	return user, nil
}

func (d userDao) Create(ctx context.Context, user *entity.User) error {
	_, err := d.Ctx(ctx).Insert(user)
	return err
}

func (d userDao) Del(ctx context.Context, user *entity.User) error {
	_, err := d.Ctx(ctx).Delete("id", user.Id)
	return err
}

func (d userDao) List(ctx context.Context, page, size int) ([]*entity.User, error) {
	var users []*entity.User
	err := d.Ctx(ctx).Page(page, size).Scan(&users)
	return users, err
}

//Total page Total
func (d userDao) Total(ctx context.Context) (int, error) {
	return d.Ctx(ctx).Count()
}
